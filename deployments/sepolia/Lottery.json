{
  "address": "0x66CEA9F7a8d61d7A1c3e1C0ABA93738F0675cEB4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minStake",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "eventDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeRemaining",
          "type": "uint256"
        }
      ],
      "name": "Lottery__EventInProgress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        }
      ],
      "name": "Lottery__NotEnoughStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__StakingNotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalStakesForCurrentEvent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playersLength",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "lotteryState",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timeRemaining",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PlayerStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winnerIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WinnerSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WinnerWithdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEventDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEventStartedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryWinners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryWinnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTheRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "getWinnerProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_minStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_eventDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_lotteryWinners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lotteryWinnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_randomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalStakesForCurrentEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_winnerProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventDuration",
          "type": "uint256"
        }
      ],
      "name": "setEventDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ac5ccd5638f1c5a962b53efbd7ff7de21f03685deb0a3797ff3000d26fbad0a",
  "receipt": {
    "to": null,
    "from": "0x918fd2c5991feAc1553DD783161eCA6E15b1AbcD",
    "contractAddress": "0x66CEA9F7a8d61d7A1c3e1C0ABA93738F0675cEB4",
    "transactionIndex": 39,
    "gasUsed": "2080046",
    "logsBloom": "0x
    "blockHash": "0x9a2cdb73047fa55ac84604f4bfaf2dc3fd3bde067c1ed1eb5428a0940b271c51",
    "transactionHash": "0x0ac5ccd5638f1c5a962b53efbd7ff7de21f03685deb0a3797ff3000d26fbad0a",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 3748979,
        "transactionHash": "0x0ac5ccd5638f1c5a962b53efbd7ff7de21f03685deb0a3797ff3000d26fbad0a",
        "address": "0x66CEA9F7a8d61d7A1c3e1C0ABA93738F0675cEB4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000918fd2c5991feac1553dd783161eca6e15b1abcd"
        ],
        "data": "0x",
        "logIndex": 65,
        "blockHash": "0x9a2cdb73047fa55ac84604f4bfaf2dc3fd3bde067c1ed1eb5428a0940b271c51"
      }
    ],
    "blockNumber": 3748979,
    "cumulativeGasUsed": "8773900",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0",
    3031,
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    604800
  ],
  "numDeployments": 5,
  "solcInputHash": "2719122d07a134e6c21c5f9f1fccfdf3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"eventDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeRemaining\",\"type\":\"uint256\"}],\"name\":\"Lottery__EventInProgress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"Lottery__NotEnoughStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__StakingNotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakesForCurrentEvent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playersLength\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"lotteryState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timeRemaining\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpKeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlayerStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WinnerSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WinnerWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventStartedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryWinnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTheRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"getWinnerProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_eventDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_lotteryWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lotteryWinnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalStakesForCurrentEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_winnerProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventDuration\",\"type\":\"uint256\"}],\"name\":\"setEventDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror Lottery__NotEnoughStake(uint256 _minStake);\\nerror Lottery__EventInProgress(uint256 timeRemaining);\\nerror Lottery__StakingNotOpen();\\nerror Lottery__UpKeepNotNeeded(\\n    uint256 totalStakesForCurrentEvent,\\n    uint256 playersLength,\\n    uint8 lotteryState,\\n    uint256 timeRemaining\\n);\\n\\ncontract Lottery is Ownable, VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING,\\n        CLOSED\\n    }\\n\\n    event RequestSent(uint256 indexed requestId);\\n    event WinnerSelected(address indexed winner, uint256 winnerIndex, uint256 amount);\\n    event PlayerStaked(address indexed player, uint256 amount);\\n    event WinnerWithdraw(address indexed winner, uint256 amount);\\n\\n    uint256 public immutable i_minStake;\\n    address[] public s_players;\\n    uint256 public s_totalStakesForCurrentEvent;\\n    uint256 public s_eventDuration;\\n    uint256 private s_eventStartedAt;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFORMATION = 3;\\n    uint32 private immutable i_callbackGasLimit = 1000000;\\n    uint32 private immutable i_numWords = 2;\\n    bytes32 private immutable i_keyHash;\\n    LotteryState public s_lotteryState;\\n    VRFCoordinatorV2Interface public COORDINATOR;\\n\\n    mapping(address => uint256) public s_winnerProceeds;\\n    address public s_lastWinner;\\n\\n    uint256[] public s_randomWords;\\n    address[] public s_lotteryWinners;\\n    uint256 public s_lotteryWinnersCount;\\n\\n    constructor(\\n        uint256 minStake,\\n        uint64 subscriptionId,\\n        address vrfCoordinatorAddress,\\n        bytes32 keyHash,\\n        uint256 eventDuration\\n    ) VRFConsumerBaseV2(vrfCoordinatorAddress) {\\n        i_minStake = minStake;\\n        i_subscriptionId = subscriptionId;\\n        i_keyHash = keyHash;\\n        s_eventDuration = eventDuration;\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinatorAddress);\\n        s_totalStakesForCurrentEvent = 0;\\n        s_lotteryState = LotteryState.CLOSED;\\n    }\\n\\n    function stake() public payable {\\n        if (msg.value < i_minStake) revert Lottery__NotEnoughStake(i_minStake);\\n        if (s_lotteryState != LotteryState.OPEN) revert Lottery__StakingNotOpen();\\n        s_players.push(msg.sender);\\n        s_totalStakesForCurrentEvent += msg.value;\\n        emit PlayerStaked(msg.sender, msg.value);\\n    }\\n\\n    function startLottery() public onlyOwner {\\n        if (s_players.length > 0) {\\n            delete s_players;\\n        }\\n        if (block.timestamp - s_eventStartedAt <= s_eventDuration) {\\n            revert Lottery__EventInProgress(block.timestamp - s_eventStartedAt);\\n        }\\n        s_eventStartedAt = block.timestamp;\\n        s_lotteryState = LotteryState.OPEN;\\n    }\\n\\n    function endEvent() private onlyOwner {\\n        delete s_players;\\n        s_totalStakesForCurrentEvent = 0;\\n        s_lotteryState = LotteryState.CLOSED;\\n    }\\n\\n    function selectWinner() internal {\\n        s_lotteryState = LotteryState.CALCULATING;\\n        requestNumber();\\n    }\\n\\n    function withdrawProceeds() public {\\n        emit WinnerWithdraw(msg.sender, s_winnerProceeds[msg.sender]);\\n        s_winnerProceeds[msg.sender] = 0;\\n        payable(msg.sender).transfer(s_winnerProceeds[msg.sender]);\\n    }\\n\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {\\n        s_randomWords = randomWords;\\n        uint256 winnerIndex = s_randomWords[0] % s_players.length;\\n        s_winnerProceeds[s_players[winnerIndex]] = s_totalStakesForCurrentEvent;\\n        s_lastWinner = s_players[winnerIndex];\\n        emit WinnerSelected(s_lastWinner, s_lotteryWinnersCount, s_winnerProceeds[s_lastWinner]);\\n        s_lotteryWinners.push(s_lastWinner);\\n        s_lotteryWinnersCount++;\\n        endEvent();\\n    }\\n\\n    function requestNumber() public returns (uint256 requestId) {\\n        requestId = COORDINATOR.requestRandomWords(\\n            i_keyHash,\\n            i_subscriptionId,\\n            REQUEST_CONFORMATION,\\n            i_callbackGasLimit,\\n            i_numWords\\n        );\\n        emit RequestSent(requestId);\\n        return requestId;\\n    }\\n\\n    function checkUpkeep(bytes memory) public view override returns (bool upkeepNeeded, bytes memory) {\\n        bool isOpen = s_lotteryState == LotteryState.OPEN;\\n        bool timePassed = (block.timestamp - s_eventStartedAt) > s_eventDuration;\\n        bool hasPlayer = s_players.length > 0;\\n        bool hasBalance = s_totalStakesForCurrentEvent > 0;\\n\\n        upkeepNeeded = isOpen && timePassed && hasPlayer && hasBalance;\\n\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    function performUpkeep(bytes calldata) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__UpKeepNotNeeded(\\n                s_totalStakesForCurrentEvent,\\n                s_players.length,\\n                uint8(s_lotteryState),\\n                block.timestamp - s_eventStartedAt\\n            );\\n        }\\n        selectWinner();\\n    }\\n\\n    function setEventDuration(uint256 eventDuration) public onlyOwner {\\n        s_eventDuration = eventDuration;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getPlayersLength() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getTheRandomNumber() public view returns (uint256) {\\n        return s_randomWords[0];\\n    }\\n\\n    function getWinnerProceeds(address winner) public view returns (uint256) {\\n        return s_winnerProceeds[winner];\\n    }\\n\\n    function getLotteryWinners() public view returns (address[] memory) {\\n        return s_lotteryWinners;\\n    }\\n\\n    function getLotteryWinnersCount() public view returns (uint256) {\\n        return s_lotteryWinnersCount;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getEventStartedAt() public view returns (uint256) {\\n        return s_eventStartedAt;\\n    }\\n\\n    function getEventDuration() public view returns (uint256) {\\n        return s_eventDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x7c182e9c1901b5a1c088feda5439ea588b90bbd31cce9c97488a3465585d378c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610140604052620f424063ffffffff1660e09063ffffffff16815250600263ffffffff166101009063ffffffff168152503480156200003d57600080fd5b50604051620027ac380380620027ac833981810160405281019062000063919062000360565b8262000084620000786200016f60201b60201c565b6200017760201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508367ffffffffffffffff1660c08167ffffffffffffffff16815250508161012081815250508060038190555082600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006002819055506002600560006101000a81548160ff021916908360028111156200015f576200015e620003e8565b5b0217905550505050505062000417565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620002558162000240565b81146200026157600080fd5b50565b60008151905062000275816200024a565b92915050565b600067ffffffffffffffff82169050919050565b6200029a816200027b565b8114620002a657600080fd5b50565b600081519050620002ba816200028f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002ed82620002c0565b9050919050565b620002ff81620002e0565b81146200030b57600080fd5b50565b6000815190506200031f81620002f4565b92915050565b6000819050919050565b6200033a8162000325565b81146200034657600080fd5b50565b6000815190506200035a816200032f565b92915050565b600080600080600060a086880312156200037f576200037e6200023b565b5b60006200038f8882890162000264565b9550506020620003a288828901620002a9565b9450506040620003b5888289016200030e565b9350506060620003c88882890162000349565b9250506080620003db8882890162000264565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516123306200047c6000396000610fb80152600061101d01526000610ffc01526000610fd901526000818161072e01528181610910015261093801526000818161085001526108a401526123306000f3fe6080604052600436106101d85760003560e01c8063715018a611610102578063dcc8953d11610095578063f2fde38b11610064578063f2fde38b14610660578063f32f6f6a14610689578063f6eaffc8146106b2578063faff2eeb146106ef576101d8565b8063dcc8953d146105a2578063df31d852146105cd578063e55ae4e8146105f8578063ed8a64a214610635576101d8565b8063c8932c88116100d1578063c8932c88146104f6578063cd61386d14610521578063cfd1a7e21461054c578063d4c8c37314610577576101d8565b8063715018a6146104605780638da5cb5b146104775780639038e693146104a2578063ae771f6b146104b9576101d8565b806340f6c0031161017a5780636b68c03c116101495780636b68c03c146103a15780636dda37bb146103cc5780636e04ff0d146103f75780636e9b165f14610435576101d8565b806340f6c003146102e55780634585e33b146103225780635119742f1461034b5780635592fc7114610376576101d8565b80631a1f82ca116101b65780631a1f82ca1461024a5780631fe543e3146102875780633a4b66f1146102b05780633b2bcbf1146102ba576101d8565b80630899ae03146101dd5780631350078014610208578063160344e214610233575b600080fd5b3480156101e957600080fd5b506101f261072c565b6040516101ff919061176f565b60405180910390f35b34801561021457600080fd5b5061021d610750565b60405161022a919061176f565b60405180910390f35b34801561023f57600080fd5b50610248610756565b005b34801561025657600080fd5b50610271600480360381019061026c91906117ca565b61080f565b60405161027e9190611838565b60405180910390f35b34801561029357600080fd5b506102ae60048036038101906102a991906119ac565b61084e565b005b6102b861090e565b005b3480156102c657600080fd5b506102cf610acc565b6040516102dc9190611a67565b60405180910390f35b3480156102f157600080fd5b5061030c60048036038101906103079190611aae565b610af2565b604051610319919061176f565b60405180910390f35b34801561032e57600080fd5b5061034960048036038101906103449190611b36565b610b3b565b005b34801561035757600080fd5b50610360610be2565b60405161036d919061176f565b60405180910390f35b34801561038257600080fd5b5061038b610bec565b6040516103989190611c41565b60405180910390f35b3480156103ad57600080fd5b506103b6610c7a565b6040516103c39190611cda565b60405180910390f35b3480156103d857600080fd5b506103e1610c91565b6040516103ee919061176f565b60405180910390f35b34801561040357600080fd5b5061041e60048036038101906104199190611daa565b610c97565b60405161042c929190611e8d565b60405180910390f35b34801561044157600080fd5b5061044a610d62565b604051610457919061176f565b60405180910390f35b34801561046c57600080fd5b50610475610d6c565b005b34801561048357600080fd5b5061048c610d80565b6040516104999190611838565b60405180910390f35b3480156104ae57600080fd5b506104b7610da9565b005b3480156104c557600080fd5b506104e060048036038101906104db91906117ca565b610f03565b6040516104ed9190611838565b60405180910390f35b34801561050257600080fd5b5061050b610f42565b604051610518919061176f565b60405180910390f35b34801561052d57600080fd5b50610536610f69565b604051610543919061176f565b60405180910390f35b34801561055857600080fd5b50610561610f76565b60405161056e919061176f565b60405180910390f35b34801561058357600080fd5b5061058c6110d1565b6040516105999190611cda565b60405180910390f35b3480156105ae57600080fd5b506105b76110e4565b6040516105c4919061176f565b60405180910390f35b3480156105d957600080fd5b506105e26110ee565b6040516105ef9190611838565b60405180910390f35b34801561060457600080fd5b5061061f600480360381019061061a91906117ca565b611114565b60405161062c9190611838565b60405180910390f35b34801561064157600080fd5b5061064a61115c565b604051610657919061176f565b60405180910390f35b34801561066c57600080fd5b5061068760048036038101906106829190611aae565b611162565b005b34801561069557600080fd5b506106b060048036038101906106ab91906117ca565b6111e5565b005b3480156106be57600080fd5b506106d960048036038101906106d491906117ca565b6111f7565b6040516106e6919061176f565b60405180910390f35b3480156106fb57600080fd5b5061071660048036038101906107119190611aae565b61121b565b604051610723919061176f565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60035481565b61075e611233565b6000600180549050111561077b576001600061077a91906116cb565b5b6003546004544261078c9190611eec565b116107db576004544261079f9190611eec565b6040517ff09b7be20000000000000000000000000000000000000000000000000000000081526004016107d2919061176f565b60405180910390fd5b426004819055506000600560006101000a81548160ff0219169083600281111561080857610807611c63565b5b0217905550565b6009818154811061081f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461090057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016108f7929190611f20565b60405180910390fd5b61090a82826112b1565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610993577f00000000000000000000000000000000000000000000000000000000000000006040517f227e2cad00000000000000000000000000000000000000000000000000000000815260040161098a919061176f565b60405180910390fd5b600060028111156109a7576109a6611c63565b5b600560009054906101000a900460ff1660028111156109c9576109c8611c63565b5b14610a00576040517fad9894df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460026000828254610a759190611f49565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f908d2ee86a5683ae8fcbed4b78856708b8e0d3a70feed3e28bc72b01c18ecee634604051610ac2919061176f565b60405180910390a2565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610b5560405180602001604052806000815250610c97565b50905080610bd557600254600180549050600560009054906101000a900460ff166002811115610b8857610b87611c63565b5b60045442610b969190611eec565b6040517fab69ec2c000000000000000000000000000000000000000000000000000000008152600401610bcc9493929190611f99565b60405180910390fd5b610bdd61157e565b505050565b6000600354905090565b60606009805480602002602001604051908101604052809291908181526020018280548015610c7057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c26575b5050505050905090565b6000600560009054906101000a900460ff16905090565b600a5481565b600060606000806002811115610cb057610caf611c63565b5b600560009054906101000a900460ff166002811115610cd257610cd1611c63565b5b149050600060035460045442610ce89190611eec565b119050600080600180549050119050600080600254119050838015610d0a5750825b8015610d135750815b8015610d1c5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600454905090565b610d74611233565b610d7e60006115b4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff167f30feb9cca70a47eaac8989afbf877fcbd223cc28379154f2501d66e410c09762600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610e2e919061176f565b60405180910390a26000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610f00573d6000803e3d6000fd5b50565b60018181548110610f1357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006008600081548110610f5957610f58611fde565b5b9060005260206000200154905090565b6000600180549050905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b815260040161105c959493929190612085565b6020604051808303816000875af115801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109f91906120ed565b9050807f0cd21a41891ff04ecd9a8754bec97e2fb85d2a4e7694329d4dc364c796f23d0660405160405180910390a290565b600560009054906101000a900460ff1681565b6000600a54905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001828154811061112a57611129611fde565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60025481565b61116a611233565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d09061219d565b60405180910390fd5b6111e2816115b4565b50565b6111ed611233565b8060038190555050565b6008818154811061120757600080fd5b906000526020600020016000915090505481565b60066020528060005260406000206000915090505481565b61123b611678565b73ffffffffffffffffffffffffffffffffffffffff16611259610d80565b73ffffffffffffffffffffffffffffffffffffffff16146112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a690612209565b60405180910390fd5b565b80600890805190602001906112c79291906116ec565b50600060018054905060086000815481106112e5576112e4611fde565b5b90600052602060002001546112fa9190612258565b9050600254600660006001848154811061131757611316611fde565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001818154811061139457611393611fde565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f866efae43947560fe9d0de9013bc323d5718730d5c1543261b48a7bcb0717b93600a5460066000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516114cc929190612289565b60405180910390a26009600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a600081548092919061156c906122b2565b9190505550611579611680565b505050565b6001600560006101000a81548160ff021916908360028111156115a4576115a3611c63565b5b02179055506115b1610f76565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b611688611233565b6001600061169691906116cb565b60006002819055506002600560006101000a81548160ff021916908360028111156116c4576116c3611c63565b5b0217905550565b50805460008255906000526020600020908101906116e99190611739565b50565b828054828255906000526020600020908101928215611728579160200282015b8281111561172757825182559160200191906001019061170c565b5b5090506117359190611739565b5090565b5b8082111561175257600081600090555060010161173a565b5090565b6000819050919050565b61176981611756565b82525050565b60006020820190506117846000830184611760565b92915050565b6000604051905090565b600080fd5b600080fd5b6117a781611756565b81146117b257600080fd5b50565b6000813590506117c48161179e565b92915050565b6000602082840312156117e0576117df611794565b5b60006117ee848285016117b5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611822826117f7565b9050919050565b61183281611817565b82525050565b600060208201905061184d6000830184611829565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118a182611858565b810181811067ffffffffffffffff821117156118c0576118bf611869565b5b80604052505050565b60006118d361178a565b90506118df8282611898565b919050565b600067ffffffffffffffff8211156118ff576118fe611869565b5b602082029050602081019050919050565b600080fd5b6000611928611923846118e4565b6118c9565b9050808382526020820190506020840283018581111561194b5761194a611910565b5b835b81811015611974578061196088826117b5565b84526020840193505060208101905061194d565b5050509392505050565b600082601f83011261199357611992611853565b5b81356119a3848260208601611915565b91505092915050565b600080604083850312156119c3576119c2611794565b5b60006119d1858286016117b5565b925050602083013567ffffffffffffffff8111156119f2576119f1611799565b5b6119fe8582860161197e565b9150509250929050565b6000819050919050565b6000611a2d611a28611a23846117f7565b611a08565b6117f7565b9050919050565b6000611a3f82611a12565b9050919050565b6000611a5182611a34565b9050919050565b611a6181611a46565b82525050565b6000602082019050611a7c6000830184611a58565b92915050565b611a8b81611817565b8114611a9657600080fd5b50565b600081359050611aa881611a82565b92915050565b600060208284031215611ac457611ac3611794565b5b6000611ad284828501611a99565b91505092915050565b600080fd5b60008083601f840112611af657611af5611853565b5b8235905067ffffffffffffffff811115611b1357611b12611adb565b5b602083019150836001820283011115611b2f57611b2e611910565b5b9250929050565b60008060208385031215611b4d57611b4c611794565b5b600083013567ffffffffffffffff811115611b6b57611b6a611799565b5b611b7785828601611ae0565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611bb881611817565b82525050565b6000611bca8383611baf565b60208301905092915050565b6000602082019050919050565b6000611bee82611b83565b611bf88185611b8e565b9350611c0383611b9f565b8060005b83811015611c34578151611c1b8882611bbe565b9750611c2683611bd6565b925050600181019050611c07565b5085935050505092915050565b60006020820190508181036000830152611c5b8184611be3565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611ca357611ca2611c63565b5b50565b6000819050611cb482611c92565b919050565b6000611cc482611ca6565b9050919050565b611cd481611cb9565b82525050565b6000602082019050611cef6000830184611ccb565b92915050565b600080fd5b600067ffffffffffffffff821115611d1557611d14611869565b5b611d1e82611858565b9050602081019050919050565b82818337600083830152505050565b6000611d4d611d4884611cfa565b6118c9565b905082815260208101848484011115611d6957611d68611cf5565b5b611d74848285611d2b565b509392505050565b600082601f830112611d9157611d90611853565b5b8135611da1848260208601611d3a565b91505092915050565b600060208284031215611dc057611dbf611794565b5b600082013567ffffffffffffffff811115611dde57611ddd611799565b5b611dea84828501611d7c565b91505092915050565b60008115159050919050565b611e0881611df3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e48578082015181840152602081019050611e2d565b60008484015250505050565b6000611e5f82611e0e565b611e698185611e19565b9350611e79818560208601611e2a565b611e8281611858565b840191505092915050565b6000604082019050611ea26000830185611dff565b8181036020830152611eb48184611e54565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ef782611756565b9150611f0283611756565b9250828203905081811115611f1a57611f19611ebd565b5b92915050565b6000604082019050611f356000830185611829565b611f426020830184611829565b9392505050565b6000611f5482611756565b9150611f5f83611756565b9250828201905080821115611f7757611f76611ebd565b5b92915050565b600060ff82169050919050565b611f9381611f7d565b82525050565b6000608082019050611fae6000830187611760565b611fbb6020830186611760565b611fc86040830185611f8a565b611fd56060830184611760565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6120208161200d565b82525050565b600067ffffffffffffffff82169050919050565b61204381612026565b82525050565b600061ffff82169050919050565b61206081612049565b82525050565b600063ffffffff82169050919050565b61207f81612066565b82525050565b600060a08201905061209a6000830188612017565b6120a7602083018761203a565b6120b46040830186612057565b6120c16060830185612076565b6120ce6080830184612076565b9695505050505050565b6000815190506120e78161179e565b92915050565b60006020828403121561210357612102611794565b5b6000612111848285016120d8565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061218760268361211a565b91506121928261212b565b604082019050919050565b600060208201905081810360008301526121b68161217a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006121f360208361211a565b91506121fe826121bd565b602082019050919050565b60006020820190508181036000830152612222816121e6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061226382611756565b915061226e83611756565b92508261227e5761227d612229565b5b828206905092915050565b600060408201905061229e6000830185611760565b6122ab6020830184611760565b9392505050565b60006122bd82611756565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122ef576122ee611ebd565b5b60018201905091905056fea2646970667358221220c6a06139b1fc3eac4397d9ca2c889c8a74a4faee648d0eaa72780356acdf4bd964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c8063715018a611610102578063dcc8953d11610095578063f2fde38b11610064578063f2fde38b14610660578063f32f6f6a14610689578063f6eaffc8146106b2578063faff2eeb146106ef576101d8565b8063dcc8953d146105a2578063df31d852146105cd578063e55ae4e8146105f8578063ed8a64a214610635576101d8565b8063c8932c88116100d1578063c8932c88146104f6578063cd61386d14610521578063cfd1a7e21461054c578063d4c8c37314610577576101d8565b8063715018a6146104605780638da5cb5b146104775780639038e693146104a2578063ae771f6b146104b9576101d8565b806340f6c0031161017a5780636b68c03c116101495780636b68c03c146103a15780636dda37bb146103cc5780636e04ff0d146103f75780636e9b165f14610435576101d8565b806340f6c003146102e55780634585e33b146103225780635119742f1461034b5780635592fc7114610376576101d8565b80631a1f82ca116101b65780631a1f82ca1461024a5780631fe543e3146102875780633a4b66f1146102b05780633b2bcbf1146102ba576101d8565b80630899ae03146101dd5780631350078014610208578063160344e214610233575b600080fd5b3480156101e957600080fd5b506101f261072c565b6040516101ff919061176f565b60405180910390f35b34801561021457600080fd5b5061021d610750565b60405161022a919061176f565b60405180910390f35b34801561023f57600080fd5b50610248610756565b005b34801561025657600080fd5b50610271600480360381019061026c91906117ca565b61080f565b60405161027e9190611838565b60405180910390f35b34801561029357600080fd5b506102ae60048036038101906102a991906119ac565b61084e565b005b6102b861090e565b005b3480156102c657600080fd5b506102cf610acc565b6040516102dc9190611a67565b60405180910390f35b3480156102f157600080fd5b5061030c60048036038101906103079190611aae565b610af2565b604051610319919061176f565b60405180910390f35b34801561032e57600080fd5b5061034960048036038101906103449190611b36565b610b3b565b005b34801561035757600080fd5b50610360610be2565b60405161036d919061176f565b60405180910390f35b34801561038257600080fd5b5061038b610bec565b6040516103989190611c41565b60405180910390f35b3480156103ad57600080fd5b506103b6610c7a565b6040516103c39190611cda565b60405180910390f35b3480156103d857600080fd5b506103e1610c91565b6040516103ee919061176f565b60405180910390f35b34801561040357600080fd5b5061041e60048036038101906104199190611daa565b610c97565b60405161042c929190611e8d565b60405180910390f35b34801561044157600080fd5b5061044a610d62565b604051610457919061176f565b60405180910390f35b34801561046c57600080fd5b50610475610d6c565b005b34801561048357600080fd5b5061048c610d80565b6040516104999190611838565b60405180910390f35b3480156104ae57600080fd5b506104b7610da9565b005b3480156104c557600080fd5b506104e060048036038101906104db91906117ca565b610f03565b6040516104ed9190611838565b60405180910390f35b34801561050257600080fd5b5061050b610f42565b604051610518919061176f565b60405180910390f35b34801561052d57600080fd5b50610536610f69565b604051610543919061176f565b60405180910390f35b34801561055857600080fd5b50610561610f76565b60405161056e919061176f565b60405180910390f35b34801561058357600080fd5b5061058c6110d1565b6040516105999190611cda565b60405180910390f35b3480156105ae57600080fd5b506105b76110e4565b6040516105c4919061176f565b60405180910390f35b3480156105d957600080fd5b506105e26110ee565b6040516105ef9190611838565b60405180910390f35b34801561060457600080fd5b5061061f600480360381019061061a91906117ca565b611114565b60405161062c9190611838565b60405180910390f35b34801561064157600080fd5b5061064a61115c565b604051610657919061176f565b60405180910390f35b34801561066c57600080fd5b5061068760048036038101906106829190611aae565b611162565b005b34801561069557600080fd5b506106b060048036038101906106ab91906117ca565b6111e5565b005b3480156106be57600080fd5b506106d960048036038101906106d491906117ca565b6111f7565b6040516106e6919061176f565b60405180910390f35b3480156106fb57600080fd5b5061071660048036038101906107119190611aae565b61121b565b604051610723919061176f565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60035481565b61075e611233565b6000600180549050111561077b576001600061077a91906116cb565b5b6003546004544261078c9190611eec565b116107db576004544261079f9190611eec565b6040517ff09b7be20000000000000000000000000000000000000000000000000000000081526004016107d2919061176f565b60405180910390fd5b426004819055506000600560006101000a81548160ff0219169083600281111561080857610807611c63565b5b0217905550565b6009818154811061081f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461090057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016108f7929190611f20565b60405180910390fd5b61090a82826112b1565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610993577f00000000000000000000000000000000000000000000000000000000000000006040517f227e2cad00000000000000000000000000000000000000000000000000000000815260040161098a919061176f565b60405180910390fd5b600060028111156109a7576109a6611c63565b5b600560009054906101000a900460ff1660028111156109c9576109c8611c63565b5b14610a00576040517fad9894df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460026000828254610a759190611f49565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f908d2ee86a5683ae8fcbed4b78856708b8e0d3a70feed3e28bc72b01c18ecee634604051610ac2919061176f565b60405180910390a2565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610b5560405180602001604052806000815250610c97565b50905080610bd557600254600180549050600560009054906101000a900460ff166002811115610b8857610b87611c63565b5b60045442610b969190611eec565b6040517fab69ec2c000000000000000000000000000000000000000000000000000000008152600401610bcc9493929190611f99565b60405180910390fd5b610bdd61157e565b505050565b6000600354905090565b60606009805480602002602001604051908101604052809291908181526020018280548015610c7057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c26575b5050505050905090565b6000600560009054906101000a900460ff16905090565b600a5481565b600060606000806002811115610cb057610caf611c63565b5b600560009054906101000a900460ff166002811115610cd257610cd1611c63565b5b149050600060035460045442610ce89190611eec565b119050600080600180549050119050600080600254119050838015610d0a5750825b8015610d135750815b8015610d1c5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600454905090565b610d74611233565b610d7e60006115b4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff167f30feb9cca70a47eaac8989afbf877fcbd223cc28379154f2501d66e410c09762600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610e2e919061176f565b60405180910390a26000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610f00573d6000803e3d6000fd5b50565b60018181548110610f1357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006008600081548110610f5957610f58611fde565b5b9060005260206000200154905090565b6000600180549050905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b815260040161105c959493929190612085565b6020604051808303816000875af115801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109f91906120ed565b9050807f0cd21a41891ff04ecd9a8754bec97e2fb85d2a4e7694329d4dc364c796f23d0660405160405180910390a290565b600560009054906101000a900460ff1681565b6000600a54905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001828154811061112a57611129611fde565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60025481565b61116a611233565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d09061219d565b60405180910390fd5b6111e2816115b4565b50565b6111ed611233565b8060038190555050565b6008818154811061120757600080fd5b906000526020600020016000915090505481565b60066020528060005260406000206000915090505481565b61123b611678565b73ffffffffffffffffffffffffffffffffffffffff16611259610d80565b73ffffffffffffffffffffffffffffffffffffffff16146112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a690612209565b60405180910390fd5b565b80600890805190602001906112c79291906116ec565b50600060018054905060086000815481106112e5576112e4611fde565b5b90600052602060002001546112fa9190612258565b9050600254600660006001848154811061131757611316611fde565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001818154811061139457611393611fde565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f866efae43947560fe9d0de9013bc323d5718730d5c1543261b48a7bcb0717b93600a5460066000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516114cc929190612289565b60405180910390a26009600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a600081548092919061156c906122b2565b9190505550611579611680565b505050565b6001600560006101000a81548160ff021916908360028111156115a4576115a3611c63565b5b02179055506115b1610f76565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b611688611233565b6001600061169691906116cb565b60006002819055506002600560006101000a81548160ff021916908360028111156116c4576116c3611c63565b5b0217905550565b50805460008255906000526020600020908101906116e99190611739565b50565b828054828255906000526020600020908101928215611728579160200282015b8281111561172757825182559160200191906001019061170c565b5b5090506117359190611739565b5090565b5b8082111561175257600081600090555060010161173a565b5090565b6000819050919050565b61176981611756565b82525050565b60006020820190506117846000830184611760565b92915050565b6000604051905090565b600080fd5b600080fd5b6117a781611756565b81146117b257600080fd5b50565b6000813590506117c48161179e565b92915050565b6000602082840312156117e0576117df611794565b5b60006117ee848285016117b5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611822826117f7565b9050919050565b61183281611817565b82525050565b600060208201905061184d6000830184611829565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118a182611858565b810181811067ffffffffffffffff821117156118c0576118bf611869565b5b80604052505050565b60006118d361178a565b90506118df8282611898565b919050565b600067ffffffffffffffff8211156118ff576118fe611869565b5b602082029050602081019050919050565b600080fd5b6000611928611923846118e4565b6118c9565b9050808382526020820190506020840283018581111561194b5761194a611910565b5b835b81811015611974578061196088826117b5565b84526020840193505060208101905061194d565b5050509392505050565b600082601f83011261199357611992611853565b5b81356119a3848260208601611915565b91505092915050565b600080604083850312156119c3576119c2611794565b5b60006119d1858286016117b5565b925050602083013567ffffffffffffffff8111156119f2576119f1611799565b5b6119fe8582860161197e565b9150509250929050565b6000819050919050565b6000611a2d611a28611a23846117f7565b611a08565b6117f7565b9050919050565b6000611a3f82611a12565b9050919050565b6000611a5182611a34565b9050919050565b611a6181611a46565b82525050565b6000602082019050611a7c6000830184611a58565b92915050565b611a8b81611817565b8114611a9657600080fd5b50565b600081359050611aa881611a82565b92915050565b600060208284031215611ac457611ac3611794565b5b6000611ad284828501611a99565b91505092915050565b600080fd5b60008083601f840112611af657611af5611853565b5b8235905067ffffffffffffffff811115611b1357611b12611adb565b5b602083019150836001820283011115611b2f57611b2e611910565b5b9250929050565b60008060208385031215611b4d57611b4c611794565b5b600083013567ffffffffffffffff811115611b6b57611b6a611799565b5b611b7785828601611ae0565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611bb881611817565b82525050565b6000611bca8383611baf565b60208301905092915050565b6000602082019050919050565b6000611bee82611b83565b611bf88185611b8e565b9350611c0383611b9f565b8060005b83811015611c34578151611c1b8882611bbe565b9750611c2683611bd6565b925050600181019050611c07565b5085935050505092915050565b60006020820190508181036000830152611c5b8184611be3565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611ca357611ca2611c63565b5b50565b6000819050611cb482611c92565b919050565b6000611cc482611ca6565b9050919050565b611cd481611cb9565b82525050565b6000602082019050611cef6000830184611ccb565b92915050565b600080fd5b600067ffffffffffffffff821115611d1557611d14611869565b5b611d1e82611858565b9050602081019050919050565b82818337600083830152505050565b6000611d4d611d4884611cfa565b6118c9565b905082815260208101848484011115611d6957611d68611cf5565b5b611d74848285611d2b565b509392505050565b600082601f830112611d9157611d90611853565b5b8135611da1848260208601611d3a565b91505092915050565b600060208284031215611dc057611dbf611794565b5b600082013567ffffffffffffffff811115611dde57611ddd611799565b5b611dea84828501611d7c565b91505092915050565b60008115159050919050565b611e0881611df3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e48578082015181840152602081019050611e2d565b60008484015250505050565b6000611e5f82611e0e565b611e698185611e19565b9350611e79818560208601611e2a565b611e8281611858565b840191505092915050565b6000604082019050611ea26000830185611dff565b8181036020830152611eb48184611e54565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ef782611756565b9150611f0283611756565b9250828203905081811115611f1a57611f19611ebd565b5b92915050565b6000604082019050611f356000830185611829565b611f426020830184611829565b9392505050565b6000611f5482611756565b9150611f5f83611756565b9250828201905080821115611f7757611f76611ebd565b5b92915050565b600060ff82169050919050565b611f9381611f7d565b82525050565b6000608082019050611fae6000830187611760565b611fbb6020830186611760565b611fc86040830185611f8a565b611fd56060830184611760565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6120208161200d565b82525050565b600067ffffffffffffffff82169050919050565b61204381612026565b82525050565b600061ffff82169050919050565b61206081612049565b82525050565b600063ffffffff82169050919050565b61207f81612066565b82525050565b600060a08201905061209a6000830188612017565b6120a7602083018761203a565b6120b46040830186612057565b6120c16060830185612076565b6120ce6080830184612076565b9695505050505050565b6000815190506120e78161179e565b92915050565b60006020828403121561210357612102611794565b5b6000612111848285016120d8565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061218760268361211a565b91506121928261212b565b604082019050919050565b600060208201905081810360008301526121b68161217a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006121f360208361211a565b91506121fe826121bd565b602082019050919050565b60006020820190508181036000830152612222816121e6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061226382611756565b915061226e83611756565b92508261227e5761227d612229565b5b828206905092915050565b600060408201905061229e6000830185611760565b6122ab6020830184611760565b9392505050565b60006122bd82611756565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122ef576122ee611ebd565b5b60018201905091905056fea2646970667358221220c6a06139b1fc3eac4397d9ca2c889c8a74a4faee648d0eaa72780356acdf4bd964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 180,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 372,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 374,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_totalStakesForCurrentEvent",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 376,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_eventDuration",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 378,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_eventStartedAt",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 394,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 0,
        "slot": "5",
        "type": "t_enum(LotteryState)343"
      },
      {
        "astId": 397,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "COORDINATOR",
        "offset": 1,
        "slot": "5",
        "type": "t_contract(VRFCoordinatorV2Interface)172"
      },
      {
        "astId": 401,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_winnerProceeds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 403,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastWinner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 406,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_randomWords",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 409,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryWinners",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 411,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryWinnersCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)172": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryState)343": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}